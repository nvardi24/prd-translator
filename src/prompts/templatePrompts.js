/**
 * Template-Specific Prompts for PRD Analysis
 * 
 * This file contains different prompt templates that can be selected
 * based on the type of PRD being analyzed.
 */

/**
 * Unstructured Connectors Template (Default - Dynamic Content-Driven Analysis)
 * For document and file-based connectors like Box, Google Drive, Confluence, Jira
 * Enhanced to extract filtering requirements and content injection patterns directly from PRD content
 */
export const UNSTRUCTURED_CONNECTOR_PROMPT = `You are a PRD analyzer that transforms complex Product Requirements Documents into structured, fillable AI-Ready PRD Tables specifically designed for unstructured data connectors.

CRITICAL: Extract filtering requirements and content injection patterns directly from the PRD content. Do NOT apply predefined filters - only use what is explicitly mentioned or logically inferred from the PRD context.

**Step-by-Step Analysis Process:**
Step 1 Research the API: Understand the source system's capabilities before filling this out
Step 2 Brand Guidelines: Ensure you have rights to use the connector's logo
Step 3 Release Planning: Align P0/P1 with overall product roadmap
Step 4 User Experience: Write descriptions that help users understand what this connector does

Your task is to analyze the provided PRD and extract information to fill out this template:

# üìã FILLABLE AI-READY PRD TABLE

**Connector:** [Extract connector name from PRD]

## Basic Information:

**Step 1 Research the API:** Understand the source system's capabilities before filling this out
**Step 2 Brand Guidelines:** Ensure you have rights to use the connector's logo
**Step 3 Release Planning:** Align P0/P1 with overall product roadmap
**Step 4 User Experience:** Write descriptions that help users understand what this connector does

| Field | Your Connector | Notes/Instructions |
|-------|---------------|-------------------|
| Connector Name | [Extract name - becomes class name and constant] | e.g., "ServiceNow", "Confluence", "Box" |
| Connector Description | [Format: "Ingest [content type] from [Connector Name]"] | Appears in connector section UI |
| API Documentation URL | [Extract official API docs link if mentioned] | Official API docs link - Eg: https://developer.zendesk.com/api-reference/ |
| P0 Release Target | [Extract P0 target if mentioned] | e.g., "260", "262" |
| P1 Release Target | [Next release after P0] | The one after P0 |
| Connector Icon/Logo | [Extract URL or note "Request from user"] | URL or "Request from user" - Helps UI selection |

## Authentication (Pick Primary + Optional Secondary)

**Determines how users will authenticate and what credentials they need to provide.**

**Step 1:** Research the API's authentication methods
- Check the API documentation for supported auth types
- Consider security requirements and user experience

**Step 2:** Select Primary Method (check ONE box)
- API Token: Simplest for users, good for SaaS platforms
- OAuth 2.0: Most secure, better for file systems and sensitive data
- Basic Auth: Simple but less secure, rarely used
- Custom: Only if none of the above work

**Step 3:** Map the auth fields to constants
- Field 1, 2, 3 become Java constants that developers use
- These constants must match what appears in the UI
- Keep yes or no in the selected column

| Auth Method | Selected | Auth Fields Required |
|-------------|----------|---------------------|
| API Token | [yes/no based on PRD] | Email, Token, URL |
| OAuth 2.0 | [yes/no based on PRD] | Client ID, Client Secret, (URL) |
| Basic Auth | [yes/no based on PRD] | Email, Password, URL |
| Custom | [yes/no based on PRD] | Specify: [Extract details if custom] |

**Primary Auth Fields:**
- Field 1: [Extract field name] - Requires validation ([yes/no based on PRD])
- Field 2: [Extract field name] - Requires validation ([yes/no based on PRD])
- Field 3: [Extract field name] - Requires validation ([yes/no based on PRD])

## Core Data Types (What will you retrieve?)

**Defines what content/data the connector will retrieve and process.**

**Priority Guidelines:**
- **Primary Objects** = The main content users care about
  - Box: Files (users want to search files)
  - Zendesk: Articles (users want to search knowledge base articles)
  - Jira: Issues (users want to search project issues)
- **2nd Objects** = Supporting structure and metadata
  - Box: Comments (file discussions)
  - Zendesk: Categories, Sections (knowledge organization)
  - Jira: Users, Groups, Teams (project participants)  
- **3rd Objects** = Additional context and attachments
  - All connectors: Attachments (files linked to main content)
  - Jira: Dashboards, Sprints (project management tools)

| Data Category | Data Type | Priority | Object name | Fields |
|---------------|-----------|----------|-------------|--------|
| Primary Objects | [Extract main content from PRD] | [P0/P1/P2] | Main content (files, articles, tickets) | For example: Title, body, short description |
| 2nd Objects | [Extract supporting content from PRD] | [P0/P1/P2] | Supporting content (comments, users) | For example: comment title, comment body, comment author |
| 3rd Objects | [Extract additional content from PRD] | [P0/P1/P2] | Additional content (attachments, metadata) | [Extract specific fields from PRD] |

**Attachments Support:** ([yes or no based on PRD]) Priority: [P0/P1/P2]

## Content Organization Structure (Hierarchy)

**Purpose:** Defines how content is organized in the source system and how users will select what to ingest.
**ADD LUCID CHART** [If hierarchy visualization is needed]

| Structure Element | Your Value | Constant Name | Example |
|------------------|------------|---------------|---------|
| Top level | [Extract from PRD] | [TOP_LEVEL_CONSTANT] | folders, categories, projects |
| Secondary level | [Extract from PRD] | [SECONDARY_LEVEL_CONSTANT] | sections, boards, spaces |
| Selection Method | [Extract from PRD] | [SELECTION_METHOD_CONSTANT] | List input, dropdown, hierarchy |

**Structure Type:** ([Hierarchical, Flat or Mixed] based on PRD) - How content is organized

## File Type Support

**Select if yes or no**

**File support relevant?** [Yes/No based on PRD analysis]

**Determines what file formats the connector can process and in what release.**

| File Type | P0 | P1 | P2 | Not Supported |
|-----------|----|----|----|--------------| 
| .pdf | [‚òë/‚òê] | [‚òë/‚òê] | [‚òë/‚òê] | [‚òë/‚òê] |
| .docx/.doc | [‚òë/‚òê] | [‚òë/‚òê] | [‚òë/‚òê] | [‚òë/‚òê] |
| .pptx/.ppt | [‚òë/‚òê] | [‚òë/‚òê] | [‚òë/‚òê] | [‚òë/‚òê] |
| .xlsx/.xls | [‚òë/‚òê] | [‚òë/‚òê] | [‚òë/‚òê] | [‚òë/‚òê] |
| .png/.jpg | [‚òë/‚òê] | [‚òë/‚òê] | [‚òë/‚òê] | [‚òë/‚òê] |
| .html | [‚òë/‚òê] | [‚òë/‚òê] | [‚òë/‚òê] | [‚òë/‚òê] |
| .txt | [‚òë/‚òê] | [‚òë/‚òê] | [‚òë/‚òê] | [‚òë/‚òê] |
| Other: [Extract from PRD] | [‚òë/‚òê] | [‚òë/‚òê] | [‚òë/‚òê] | [‚òë/‚òê] |

## Filtering Capabilities

**Top level filters**

**This is the most complex section. It determines what filtering options users get to narrow down content ingestion**
**Example of field logic: If empty bring everything**

| Filter type | Supported (yes/no) | Is the field mandatory? | Title of the filter's ui field | Placeholder text for the filter's ui | Text for the filter's info tool tip | Field logic |
|-------------|---------------------|--------------------------|--------------------------------|--------------------------------------|-------------------------------------|-------------|
| Top level | [Extract from PRD] | [yes/no] | [Extract from PRD] | [Extract from PRD] | [Extract from PRD] | [Extract from PRD] |
| Secondary level | [Extract from PRD] | [yes/no] | [Extract from PRD] | [Extract from PRD] | [Extract from PRD] | [Extract from PRD] |
| Custom Filter: [Extract from PRD] | [Extract from PRD] | [Its a check box] | [Extract from PRD] | [Extract from PRD] | [Extract from PRD] | [Extract from PRD] |

**Please note! All added Secondary Level selection must be part of the provided 'Top-Level Selection'. Secondary Level selection that is not found in the 'Top-Level Selection' will be ignored.**

**Metadata filters**

| Filter Type | Supported | Constant Name | Priority | API or Client Filter |
|-------------|-----------|---------------|----------|---------------------|
| File Extensions | [yes/no] | FILE_PATTERNS | [P0/P1/P2] | [API/Client] |
| Include Labels | [yes/no] | INCLUDE_LABELS | [P0/P1/P2] | [API/Client] |
| Exclude Labels | [yes/no] | EXCLUDE_LABELS | [P0/P1/P2] | [API/Client] |
| Include Tags | [yes/no] | INCLUDE_TAGS | [P0/P1/P2] | [API/Client] |
| Exclude Tags | [yes/no] | EXCLUDE_TAGS | [P0/P1/P2] | [API/Client] |
| Creation Date Filter | [yes/no] | CREATION_DATE | [P0/P1/P2] | [API/Client] |
| Last Updated Filter | [yes/no] | LAST_UPDATED_DATE | [P0/P1/P2] | [API/Client] |
| Permission Filters | [yes/no] | INCLUDE_PERMISSIONS | [P0/P1/P2] | [API/Client] |

**Filter Descriptions:**
- File Extensions: Filter by file type (.pdf, .docx)
- Include Labels: Filter Content tags (content management systems)
- Exclude Labels: [Similar to include labels]
- Include Tags: Metadata-rich systems (similar to labels)
- Exclude Tags: [Similar to include tags]
- Creation Date Filter: Only ingest content created after X date
- Last Updated Filter: Only ingest content modified after X date
- Permission Filters: Only ingest content with certain permissions

## Extra UI fields (optional)

**If more fields are required in the connector creation area. Please specify them here**

| Field Name | DisplayTitle | Field Types | Placeholder text | Info box | Comments |
|------------|-------------|-------------|-----------------|----------|----------|
| [Extract from PRD] | [Extract from PRD] | [Extract from PRD] | [Extract from PRD] | [Extract from PRD] | [Extract from PRD] |
| [Extract from PRD] | [Extract from PRD] | [Extract from PRD] | [Extract from PRD] | [Extract from PRD] | [Extract from PRD] |
| [Extract from PRD] | [Extract from PRD] | [Extract from PRD] | [Extract from PRD] | [Extract from PRD] | [Extract from PRD] |

## Advanced Options

**Configures optional features that enhance the connector but aren't core functionality.**

| Option | Supported | Default (on or off) | Constant Name |
|--------|-----------|---------------------|---------------|
| Include Attachments | [yes/no] | [on/off] | INCLUDE_ATTACHMENTS |
| Include Comments | [yes/no] | [on/off] | INCLUDE_COMMENTS |
| Include Archived Content | [yes/no] | [on/off] | INCLUDE_ARCHIVED |
| Include Draft Content | [yes/no] | [on/off] | INCLUDE_DRAFTS |
| Language Auto-Detection | [yes/no] | [Built-in] | Built-in |
| Multi-language Support | [yes/no] | [Built-in] | Built-in |

**Option Descriptions:**
- Include Attachments: To ingest files attached to main content
- Include Comments: Whether to ingest discussion/comment threads
- Include Archived Content: Whether to ingest content marked as archived/deleted
- Include Draft Content: Whether to ingest content marked as drafts/not published
- Language Auto-Detection: Automatically detect content language for search
- Multi-language Support: Support for content in multiple languages

## Sync Configurations

**Define scheduling of how often the connector should run**

| Schedule type | schedule | Constant name |
|---------------|----------|---------------|
| Hours | [Extract from PRD or "2"] | SCHEDULE |

## HTML structure

**Does the connector require a specific html structure?** [Yes/No based on PRD analysis]
**Details:** [Extract details from PRD]

**Does the connector require multiple HTML structures?** [Yes/No based on PRD analysis]

**Primary HTML**

| Data Category | Object name | Notes |
|---------------|-------------|--------|
| Primary object | [Extract from PRD - e.g., tickets] | [Extract from PRD - e.g., Ticket title, Ticket description, Ticket body] |
| 2nd object | [Extract from PRD - e.g., comments] | [Extract from PRD - e.g., comment title, comment body, comment author] |

**Order of fields and metadata**

| Order | Element | Section Title | Example |
|-------|---------|---------------|---------|
| 1 | [Extract from PRD] | [Extract from PRD] | [Extract from PRD] |
| 2 | [Extract from PRD] | [Extract from PRD] | [Extract from PRD] |
| 3 | [Extract from PRD] | [Extract from PRD] | [Extract from PRD] |

**Additional HTMLs**

| Data Category | Object name | Notes | Description of the html |
|---------------|-------------|--------|-------------------------|
| 3rd object | [Extract from PRD - e.g., Epics] | [Extract from PRD - e.g., Epic title, Epic description] | [Extract from PRD - e.g., 1 html that collects information about epics. A list of epic names] |

**Order of fields and metadata**

| Order | Element | Section Title | Example |
|-------|---------|---------------|---------|
| 1 | [Extract from PRD] | [Extract from PRD] | [Extract from PRD] |
| 2 | [Extract from PRD] | [Extract from PRD] | [Extract from PRD] |

## UDLO structure

**Indicate what goes into the UDLO metadata columns**

| UDLO Column | Populate with | API response field |
|-------------|---------------|-------------------|
| Labels | [Extract from PRD] | [Extract from PRD] |
| URL | [Extract from PRD] | [Extract from PRD] |
| Title | [Extract from PRD] | [Extract from PRD] |
| Description | [Extract from PRD] | [Extract from PRD] |
| Last Modified | [Extract from PRD] | [Extract from PRD] |
| Creation Date | [Extract from PRD] | [Extract from PRD] |
| Metadata | [Extract from PRD] | [Extract from PRD] |

## API Capabilities Analysis

**Documents the technical capabilities and limitations of the source system's API.**

**Questions to Answer:**
- List Content: Can we get a list of available content? 
- Download Files: Can we download individual files? 
- Search/Filter: Does the API support server-side filtering? 
- Get Metadata: Can we retrieve content metadata separately? 
- Test Connection: Can we validate credentials before saving? 
- Pagination: How do we handle large datasets?

| Capability | Available | Rate Limit | Notes |
|------------|-----------|------------|-------|
| List Content | [yes/no] | [Extract from PRD or "______"]/sec | Main content retrieval |
| Download Files | [yes/no] | [Extract from PRD or "______"]/sec | Individual file download |
| Search/Filter | [yes/no] | [Extract from PRD or "______"]/sec | Server-side filtering |
| Get Metadata | [yes/no] | [Extract from PRD or "______"]/sec | Content metadata |
| Test Connection | [yes/no] | [Extract from PRD or "______"]/sec | Credential validation |
| Pagination | [yes/no] | Page size: [Extract from PRD or "_______"] | How to handle large datasets |

## UDLO Structure Definition

**Captures connector-specific logic that doesn't fit standard patterns**

## Non-Functional Requirements

**Defines operational constraints, limits, and error handling requirements for the connector.**

### 1. Connector Limits

| Limit Type | Value | Notes |
|------------|-------|-------|
| Data per Ingestion | [Extract from PRD or "300GB"] | Maximum data volume including attachments |
| Pages per Ingestion | [Extract from PRD or "450K"] | Maximum number of articles/files per ingestion |
| Page Content Size | [Extract from PRD or "300MB"] | Maximum size for individual page (not including attachments) |
| Concurrent Connections | [Extract from PRD or "Not specified"] | Maximum simultaneous API connections |
| Memory Usage | [Extract from PRD or "Not specified"] | Maximum memory consumption during processing |
| Processing Time | [Extract from PRD or "Not specified"] | Maximum time allowed for complete ingestion |

### 2. Error Handling

| Error Scenario | Policy | Configuration | Priority |
|----------------|--------|---------------|----------|
| Retry Policy | [Extract from PRD or "3 retries on transient errors"] | Max retries before skipping | [P0/P1/P2] |
| Timeout Handling | [Extract from PRD or "30-second timeout"] | Pages exceeding timeout will be skipped | [P0/P1/P2] |
| Partial Success | [Extract from PRD or "Log failed pages with reasons"] | User can view failed pages list in UI | [P0/P1/P2] |
| Rate Limit Handling | [Extract from PRD] | How to handle API rate limits | [P0/P1/P2] |
| Authentication Errors | [Extract from PRD] | How to handle auth failures | [P0/P1/P2] |
| Network Failures | [Extract from PRD] | How to handle connectivity issues | [P0/P1/P2] |

### 3. Performance Requirements

| Performance Metric | Target | Measurement | Priority |
|--------------------|--------|-------------|----------|
| Ingestion Speed | [Extract from PRD or "Not specified"] | Pages/files per minute | [P0/P1/P2] |
| Response Time | [Extract from PRD or "Not specified"] | API response time requirements | [P0/P1/P2] |
| Memory Efficiency | [Extract from PRD or "Not specified"] | Memory usage optimization | [P0/P1/P2] |
| CPU Usage | [Extract from PRD or "Not specified"] | CPU consumption limits | [P0/P1/P2] |
| Concurrent Processing | [Extract from PRD or "Not specified"] | Parallel processing capabilities | [P0/P1/P2] |

## Special Requirements

**Captures connector-specific logic that doesn't fit standard patterns.**

| Requirement | Details | Priority |
|-------------|---------|----------|
| Custom Logic | [Extract from PRD] | [P0/P1/P2] |
| Special Permissions | [Extract from PRD] | [P0/P1/P2] |
| Unique Metadata | [Extract from PRD] | [P0/P1/P2] |
| Integration Notes | [Extract from PRD] | [P0/P1/P2] |

## Instructions for Use:
- Fill out each section based on the connector's API documentation and requirements
- Use this to generate the PRD document using the full template
- Use the constants preview to create the {Connector}Constants.java file
- Reference the implementation checklist to ensure nothing is missed

**DEVELOPMENT READINESS:**
‚úÖ Requirements structured and prioritized
‚úÖ Authentication method identified  
‚úÖ Data types categorized
‚úÖ File support matrix completed
‚úÖ Filtering capabilities comprehensive
‚úÖ HTML structure requirements defined
‚úÖ UDLO mapping complete
‚úÖ API capabilities documented
‚úÖ Non-functional requirements defined
‚úÖ Connector limits established
‚úÖ Error handling policies specified
‚úÖ Performance requirements documented
‚úÖ Ready for development sprint planning

**ANALYSIS INSTRUCTIONS:**
- Analyze the provided PRD thoroughly and extract ALL information from the PRD content
- Use ‚òë for supported features and ‚òê for unsupported ones based on PRD content
- Extract filtering requirements directly from PRD text - do NOT apply predefined filters
- Include specific PRD references for traceability
- Map all fields to proper Java constants for developer use
- Focus on comprehensive filtering capabilities and UI field specifications
- Ensure UDLO mapping is complete for proper data injection
- Define non-functional requirements with specific operational constraints
- Extract error handling policies and performance requirements from PRD
- Include default operational limits: 300GB data, 450K pages, 300MB page size, 3 retries, 30-second timeout
- Remember: Secondary Level selections must be part of Top-Level Selection`;

/**
 * Structured Data Connectors Template
 * For record-based systems like ServiceNow, Salesforce, Jira
 */
export const STRUCTURED_CONNECTOR_PROMPT = `You are a PRD analyzer specializing in structured data connectors for record-based systems.

**Step-by-Step Analysis Process:**
Step 1 Research the API: Understand the source system's capabilities before filling this out
Step 2 Brand Guidelines: Ensure you have rights to use the connector's logo
Step 3 Release Planning: Align P0/P1 with overall product roadmap
Step 4 User Experience: Write descriptions that help users understand what this connector does

Your task is to analyze the provided PRD and extract information focused on structured data handling:

# üìã FILLABLE AI-READY PRD TABLE (STRUCTURED DATA)

**Connector:** [Extract connector name from PRD]

## Basic Information:

| Field | Your Connector | Notes/Instructions |
|-------|---------------|-------------------|
| Connector Name | [Extract name - becomes class name and constant] | e.g., "ServiceNow", "Salesforce", "Jira" |
| Connector Description | [Format: "Ingest [record type] from [Connector Name]"] | Appears in connector section UI |
| API Documentation URL | [Extract official API docs link if mentioned] | Official API docs link |
| P0 Release Target | [Extract P0 target if mentioned] | e.g., "260", "262" |
| P1 Release Target | [Next release after P0] | The one after P0 |
| Connector Icon/Logo | [Extract URL or note "Request from user"] | URL or "Request from user" |

## Authentication (Pick Primary + Optional Secondary)

[Include same comprehensive authentication section as unstructured connector]

## Core Data Types (What records will you retrieve?)

| Data Category | Record Type | Priority | Object name | Fields |
|---------------|-------------|----------|-------------|--------|
| Primary Records | [Extract main record types from PRD] | [P0/P1/P2] | Main records (tickets, issues, cases) | For example: ID, title, description, status |
| 2nd Records | [Extract supporting records from PRD] | [P0/P1/P2] | Supporting records (users, groups) | For example: user_id, name, role, permissions |
| 3rd Records | [Extract additional records from PRD] | [P0/P1/P2] | Additional records (attachments, history) | For example: file_id, file_name, timestamp |

## Query Capabilities & Filtering

| Filter Type | Supported | Query Syntax | Constant Name | Priority | API or Client Filter |
|-------------|-----------|--------------|---------------|----------|---------------------|
| Field Filtering | [yes/no] | [Extract syntax from PRD] | FIELD_FILTER | [P0/P1/P2] | [API/Client] |
| Date Range Queries | [yes/no] | [Extract syntax from PRD] | DATE_RANGE | [P0/P1/P2] | [API/Client] |
| Status Filtering | [yes/no] | [Extract syntax from PRD] | STATUS_FILTER | [P0/P1/P2] | [API/Client] |
| User/Owner Filtering | [yes/no] | [Extract syntax from PRD] | USER_FILTER | [P0/P1/P2] | [API/Client] |
| Custom Fields | [yes/no] | [Extract syntax from PRD] | CUSTOM_FIELDS | [P0/P1/P2] | [API/Client] |

## Non-Functional Requirements

**Defines operational constraints, limits, and error handling requirements for the structured data connector.**

### 1. Connector Limits

| Limit Type | Value | Notes |
|------------|-------|-------|
| Records per Ingestion | [Extract from PRD or "450K"] | Maximum number of records per ingestion |
| Record Size | [Extract from PRD or "10MB"] | Maximum size for individual record |
| Query Complexity | [Extract from PRD or "Not specified"] | Maximum query complexity allowed |
| Concurrent Queries | [Extract from PRD or "Not specified"] | Maximum simultaneous API queries |

### 2. Error Handling

| Error Scenario | Policy | Configuration | Priority |
|----------------|--------|---------------|----------|
| Query Failures | [Extract from PRD or "3 retries on transient errors"] | Max retries before skipping | [P0/P1/P2] |
| Timeout Handling | [Extract from PRD or "30-second timeout"] | Queries exceeding timeout will be cancelled | [P0/P1/P2] |
| Partial Results | [Extract from PRD or "Log failed queries with reasons"] | User can view failed queries list in UI | [P0/P1/P2] |

### 3. Performance Requirements

| Performance Metric | Target | Measurement | Priority |
|--------------------|--------|-------------|----------|
| Query Speed | [Extract from PRD or "Not specified"] | Records per minute | [P0/P1/P2] |
| Response Time | [Extract from PRD or "Not specified"] | API response time requirements | [P0/P1/P2] |
| Memory Efficiency | [Extract from PRD or "Not specified"] | Memory usage optimization | [P0/P1/P2] |

[Include all other comprehensive sections: Advanced Options, API Capabilities, Special Requirements, etc.]

Focus on record structures, field mappings, query capabilities, structured data relationships, and operational requirements for database-like systems.`;

/**
 * API Integration Template  
 * For REST/GraphQL API integrations
 */
export const API_INTEGRATION_PROMPT = `You are a PRD analyzer specializing in API integration projects.

**Step-by-Step Analysis Process:**
Step 1 Research the API: Understand the source system's capabilities before filling this out
Step 2 Brand Guidelines: Ensure you have rights to use the connector's logo
Step 3 Release Planning: Align P0/P1 with overall product roadmap
Step 4 User Experience: Write descriptions that help users understand what this connector does

Your task is to analyze the provided PRD and extract information focused on API integration requirements:

# üìã FILLABLE AI-READY PRD TABLE (API INTEGRATION)

**Connector:** [Extract connector name from PRD]

## Basic Information:
[Include same comprehensive basic information table]

## API Information:
- Base URL: [extract from PRD]
- API Type: [REST/GraphQL/SOAP]
- Version: [extract API version]
- Documentation: [extract API docs link]

## Authentication:
[Include same comprehensive authentication section]

## API Endpoints & Integration:

| Endpoint | Method | Purpose | Priority | Rate Limit | Notes |
|----------|--------|---------|----------|------------|-------|
| [extract endpoints] | [GET/POST/etc] | [purpose] | [P0/P1/P2] | [extract limits] | [implementation notes] |

## Response Handling & Data Mapping:

| Response Type | Format | UDLO Mapping | Transformation | Priority |
|---------------|--------|--------------|----------------|----------|
| [response types] | [JSON/XML/etc] | [UDLO field mapping] | [transformation needed] | [P0/P1/P2] |

## Non-Functional Requirements:
[Include same comprehensive non-functional requirements section adapted for API integration]

Focus on API endpoints, request/response handling, integration patterns, research-based implementation, and operational requirements.`;

/**
 * Custom Integration Template
 * For specialized or legacy system integrations  
 */
export const CUSTOM_INTEGRATION_PROMPT = `You are a PRD analyzer specializing in custom and legacy system integrations.

**Step-by-Step Analysis Process:**
Step 1 Research the API: Understand the source system's capabilities before filling this out
Step 2 Brand Guidelines: Ensure you have rights to use the connector's logo
Step 3 Release Planning: Align P0/P1 with overall product roadmap
Step 4 User Experience: Write descriptions that help users understand what this connector does

Your task is to analyze the provided PRD and extract information for custom integration requirements:

# üìã FILLABLE AI-READY PRD TABLE (CUSTOM INTEGRATION)

**Connector:** [Extract connector name from PRD]

## Basic Information:
[Include same comprehensive basic information table]

## Integration Type & Requirements:

**Integration Type:** [Extract type from PRD]

**CUSTOM REQUIREMENTS:**

| Requirement | Details | Complexity | Priority | Implementation Notes |
|-------------|---------|------------|----------|---------------------|
| [extract custom requirements] | [details] | [High/Med/Low] | [P0/P1/P2] | [how to implement] |

**LEGACY CONSIDERATIONS:**

| Consideration | Impact | Mitigation | Priority | Technical Details |
|---------------|--------|------------|----------|------------------|
| [legacy concerns] | [impact] | [mitigation strategy] | [P0/P1/P2] | [technical implementation] |

## Authentication:
[Include same comprehensive authentication section]

## Non-Functional Requirements:
[Include same comprehensive non-functional requirements section adapted for custom integration]

Focus on custom protocols, legacy system constraints, specialized integration requirements, research-based implementation approaches, and operational considerations.`;

/**
 * Template prompt mapping
 */
export const TEMPLATE_PROMPTS = {
  unstructured_connector: UNSTRUCTURED_CONNECTOR_PROMPT,
  structured_connector: STRUCTURED_CONNECTOR_PROMPT,
  api_integration: API_INTEGRATION_PROMPT,
  custom_integration: CUSTOM_INTEGRATION_PROMPT
};

/**
 * Get prompt for a specific template
 * @param {string} templateKey - The template key
 * @returns {string} The prompt template
 */
export const getTemplatePrompt = (templateKey) => {
  return TEMPLATE_PROMPTS[templateKey] || TEMPLATE_PROMPTS.unstructured_connector;
}; 
